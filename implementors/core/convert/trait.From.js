(function() {var implementors = {};
implementors["competitive"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/data_structures/monoid/struct.Sum.html\" title=\"struct competitive::data_structures::monoid::Sum\">Sum</a>&lt;T&gt;","synthetic":false,"types":["competitive::data_structures::monoid::Sum"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/data_structures/monoid/struct.Product.html\" title=\"struct competitive::data_structures::monoid::Product\">Product</a>&lt;T&gt;","synthetic":false,"types":["competitive::data_structures::monoid::Product"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/data_structures/monoid/struct.Max.html\" title=\"struct competitive::data_structures::monoid::Max\">Max</a>&lt;T&gt;","synthetic":false,"types":["competitive::data_structures::monoid::Max"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/data_structures/monoid/struct.Min.html\" title=\"struct competitive::data_structures::monoid::Min\">Min</a>&lt;T&gt;","synthetic":false,"types":["competitive::data_structures::monoid::Min"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/data_structures/monoid/struct.XOR.html\" title=\"struct competitive::data_structures::monoid::XOR\">XOR</a>&lt;T&gt;","synthetic":false,"types":["competitive::data_structures::monoid::XOR"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()